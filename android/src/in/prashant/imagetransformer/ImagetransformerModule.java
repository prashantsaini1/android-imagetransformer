/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package in.prashant.imagetransformer;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;



@Kroll.module(name="Imagetransformer", id="in.prashant.imagetransformer")
public class ImagetransformerModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "ImagetransformerModule";
	private static final String SOURCE_FILE = "sourceFile";
	private static final String DEST_FILE = "destFile";
	private static final String QUALITY = "quality";
	private static final String WIDTH = "width";
	private static final String HEIGHT = "height";


	public ImagetransformerModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
		@Kroll.method
		public boolean resize(@Kroll.argument(optional=true) KrollDict options) {
			String sourceFile = null;
			String destFile = null;
			int width = 0;
			int height = 0;
			int quality = 0;
			
			if (options != null) {
				sourceFile = options.containsKeyAndNotNull(SOURCE_FILE) ? (String) options.get(SOURCE_FILE) : null;
				destFile = options.containsKeyAndNotNull(DEST_FILE) ? (String) options.get(DEST_FILE) : null;
				width = options.containsKeyAndNotNull(WIDTH) ? (Integer) options.get(WIDTH) : null;
				height = options.containsKeyAndNotNull(HEIGHT) ? (Integer) options.get(HEIGHT) : null;
				quality = options.containsKeyAndNotNull(QUALITY) ? (Integer) options.get(QUALITY) : 100;
			}
			
			if (sourceFile != null) {
				sourceFile = sourceFile.replaceFirst("file://", "");
				destFile = destFile.replaceFirst("file://", "");
				
				Log.i(LCAT, "Source Path = " + sourceFile);
				Log.i(LCAT, "Dest Path = " + destFile);
				
				return Blobby.rescaleAndCompressToFile(sourceFile, destFile, width, height, true, quality);
			}
			
			return false;
		}

}

